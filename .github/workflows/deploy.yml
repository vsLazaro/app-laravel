name: Deploy PHP App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CONTAINER_NAME: php-app-container
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/tdc-php-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Build and push Docker image
      id: build
      run: |
        # Verificar se DOCKERHUB_USERNAME est√° configurado
        if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          echo "‚ùå Erro: DOCKERHUB_USERNAME n√£o est√° configurado"
          exit 1
        fi
        
        # Definir nome da imagem
        IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/tdc-php-app"
        
        # Gerar tag baseada no commit
        TAG=$(echo $GITHUB_SHA | head -c7)
        echo "image-tag=$TAG" >> $GITHUB_OUTPUT
        
        # Build e push com tag latest e commit
        docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$TAG .
        docker push $IMAGE_NAME:latest
        docker push $IMAGE_NAME:$TAG
        
        echo "‚úÖ Imagem enviada para Docker Hub: $IMAGE_NAME:latest e $IMAGE_NAME:$TAG"
        
        # Verificar se ser√° feito deploy
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "üöÄ Deploy ser√° executado ap√≥s build bem-sucedido"
        else
          echo "üì¶ Apenas build realizado (deploy apenas na branch main)"
        fi
        
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy Info
      run: |
        IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/tdc-php-app"
        echo "üöÄ Iniciando deploy para produ√ß√£o"
        echo "üìç Branch: ${{ github.ref_name }}"
        echo "üì¶ Imagem: $IMAGE_NAME:${{ needs.build-and-push.outputs.image-tag }}"
        echo "üéØ Target: ${{ secrets.VPS_HOST }}"
        
    - name: Deploy to VPS
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
      run: |
        # Definir nome da imagem
        IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/tdc-php-app"
        
        # Verificar se as vari√°veis est√£o definidas
        if [ -z "$IMAGE_NAME" ]; then
          echo "‚ùå Erro: IMAGE_NAME est√° vazio"
          exit 1
        fi
        
        echo "üì¶ Usando imagem: $IMAGE_NAME"
        
        # Configurar SSH
        mkdir -p ~/.ssh
        echo "$VPS_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
        
        # Conectar ao VPS e fazer deploy
        ssh -i ~/.ssh/id_rsa $VPS_USER@$VPS_HOST "
          # Verificar se Docker est√° instalado
          echo 'üîç Verificando se Docker est√° instalado...'
          if ! command -v docker &> /dev/null; then
            echo '‚ùå ERRO: Docker n√£o est√° instalado no VPS!'
            exit 1
          else
            echo '‚úÖ Docker est√° instalado'
          fi
          
          # Verificar se usu√°rio est√° no grupo docker
          if ! groups | grep -q docker; then
            echo '‚ùå ERRO: Usu√°rio n√£o est√° no grupo docker!'
            echo 'üìã Para adicionar ao grupo, execute no VPS:'
            echo '   sudo usermod -aG docker $USER'
            echo '   newgrp docker'
            exit 1
          else
            echo '‚úÖ Usu√°rio est√° no grupo docker'
          fi
          
          # Parar e remover container anterior (se existir)
          echo 'Parando container anterior...'
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true
          
          # Remover imagem anterior
          echo 'Removendo imagem anterior...'
          docker rmi $IMAGE_NAME:latest 2>/dev/null || true
          
          # Fazer pull da nova imagem do Docker Hub
          echo 'Baixando nova imagem do Docker Hub...'
          docker pull $IMAGE_NAME:latest
          
          # Executar novo container com vari√°veis de ambiente
          echo 'Iniciando novo container...'
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 80:80 \
            -e APP_NAME='${{ secrets.APP_NAME }}' \
            -e APP_KEY='${{ secrets.APP_KEY }}' \
            -e APP_URL='${{ secrets.APP_URL }}' \
            -e DB_CONNECTION='${{ secrets.DB_CONNECTION }}' \
            -e DB_HOST='${{ secrets.DB_HOST }}' \
            -e DB_PORT='${{ secrets.DB_PORT }}' \
            -e DB_DATABASE='${{ secrets.DB_DATABASE }}' \
            -e DB_USERNAME='${{ secrets.DB_USERNAME }}' \
            -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
            $IMAGE_NAME:latest
            
          # Verificar se container est√° rodando
          echo 'Verificando status do container...'
          docker ps | grep $CONTAINER_NAME
          
          echo '‚úÖ Deploy realizado com sucesso!'
        "