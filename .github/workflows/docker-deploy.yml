name: Docker Deploy

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Copy environment file
        run: cp .env.example .env

      - name: Install PHP dependencies
        run: composer install --optimize-autoloader --no-interaction

      - name: Install Node dependencies
        run: npm ci

      - name: Generate application key
        run: php artisan key:generate

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Run migrations
        run: php artisan migrate --force

      - name: Build assets
        run: npm run build

      - name: Run PHP tests
        run: php artisan test

      - name: Run ESLint
        run: npm run lint

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=20
            PHP_VERSION=8.2

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.STAGING_PATH }}
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull ${{ needs.build.outputs.image }}
            
            # Stop existing containers
            docker-compose -f docker-compose.staging.yml down || true
            
            # Start new containers
            export IMAGE=${{ needs.build.outputs.image }}
            docker-compose -f docker-compose.staging.yml up -d
            
            # Wait for application to be ready
            sleep 15
            
            # Run migrations
            docker-compose -f docker-compose.staging.yml exec -T app php artisan migrate --force
            
            # Clear and cache config
            docker-compose -f docker-compose.staging.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.staging.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.staging.yml exec -T app php artisan view:cache

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull ${{ needs.build.outputs.image }}
            
            # Stop existing containers
            docker-compose down || true
            
            # Start new containers
            export IMAGE=${{ needs.build.outputs.image }}
            docker-compose up -d
            
            # Wait for application to be ready
            sleep 15
            
            # Run migrations
            docker-compose exec -T app php artisan migrate --force
            
            # Clear and cache config
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            docker-compose exec -T app php artisan queue:restart

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build successful!"
          else
            echo "❌ Build failed!"
          fi
          
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful!"
          elif [[ "${{ needs.deploy-staging.result }}" == "skipped" ]]; then
            echo "⏭️ Staging deployment skipped"
          else
            echo "❌ Staging deployment failed!"
          fi
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful!"
          elif [[ "${{ needs.deploy-production.result }}" == "skipped" ]]; then
            echo "⏭️ Production deployment skipped"
          else
            echo "❌ Production deployment failed!"
          fi 